using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using DistributionSoftware.Models;
using DistributionSoftware.Common;

namespace DistributionSoftware.DataAccess
{
    public class SalesInvoiceRepository : ISalesInvoiceRepository
    {
        private readonly string _connectionString;

        public SalesInvoiceRepository()
        {
            _connectionString = ConfigurationManager.DistributionConnectionString;
        }

        public int CreateSalesInvoice(SalesInvoice invoice)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    try
                    {
                        // Invoice number and barcode should already be generated by the service layer
                        // Only generate if somehow missing (fallback)
                        if (string.IsNullOrEmpty(invoice.InvoiceNumber))
                        {
                            invoice.InvoiceNumber = GenerateInvoiceNumber();
                        }
                        
                        if (string.IsNullOrEmpty(invoice.Barcode))
                        {
                            invoice.Barcode = invoice.InvoiceNumber;
                            invoice.BarcodeImage = GenerateBarcodeImage(invoice.Barcode);
                        }

                        var query = @"
                            INSERT INTO SalesInvoices (
                                InvoiceNumber, InvoiceDate, CustomerId, CustomerName, CustomerPhone, CustomerAddress,
                                PaymentMode, Subtotal, DiscountAmount, DiscountPercentage, TaxableAmount, TaxAmount, 
                                TaxPercentage, TotalAmount, PaidAmount, ChangeAmount, Status, Remarks, CreatedBy, 
                                CreatedDate, Barcode, BarcodeImage, PrintStatus, CashierId, TransactionTime
                            ) VALUES (
                                @InvoiceNumber, @InvoiceDate, @CustomerId, @CustomerName, @CustomerPhone, @CustomerAddress,
                                @PaymentMode, @Subtotal, @DiscountAmount, @DiscountPercentage, @TaxableAmount, @TaxAmount,
                                @TaxPercentage, @TotalAmount, @PaidAmount, @ChangeAmount, @Status, @Remarks, @CreatedBy,
                                @CreatedDate, @Barcode, @BarcodeImage, @PrintStatus, @CashierId, @TransactionTime
                            );
                            SELECT SCOPE_IDENTITY();";

                        using (var command = new SqlCommand(query, connection, transaction))
                        {
                            command.CommandTimeout = 30; // 30 second timeout
                            command.Parameters.AddWithValue("@InvoiceNumber", invoice.InvoiceNumber);
                            command.Parameters.AddWithValue("@InvoiceDate", invoice.InvoiceDate);
                            // Handle Walk-in Customer (ID = 0 or -1) by using the walk-in customer record
                            if (invoice.CustomerId <= 0)
                            {
                                var walkInCustomerId = GetOrCreateWalkInCustomerInTransaction(connection, transaction);
                                command.Parameters.AddWithValue("@CustomerId", walkInCustomerId);
                            }
                            else
                            {
                                command.Parameters.AddWithValue("@CustomerId", invoice.CustomerId);
                            }
                            command.Parameters.AddWithValue("@CustomerName", invoice.CustomerName ?? (object)DBNull.Value);
                            command.Parameters.AddWithValue("@CustomerPhone", invoice.CustomerPhone ?? (object)DBNull.Value);
                            command.Parameters.AddWithValue("@CustomerAddress", invoice.CustomerAddress ?? (object)DBNull.Value);
                            command.Parameters.AddWithValue("@PaymentMode", invoice.PaymentMode);
                            command.Parameters.AddWithValue("@Subtotal", invoice.Subtotal);
                            command.Parameters.AddWithValue("@DiscountAmount", invoice.DiscountAmount);
                            command.Parameters.AddWithValue("@DiscountPercentage", invoice.DiscountPercentage);
                            command.Parameters.AddWithValue("@TaxableAmount", invoice.TaxableAmount);
                            command.Parameters.AddWithValue("@TaxAmount", invoice.TaxAmount);
                            command.Parameters.AddWithValue("@TaxPercentage", invoice.TaxPercentage);
                            command.Parameters.AddWithValue("@TotalAmount", invoice.TotalAmount);
                            command.Parameters.AddWithValue("@PaidAmount", invoice.PaidAmount);
                            command.Parameters.AddWithValue("@ChangeAmount", invoice.ChangeAmount);
                            command.Parameters.AddWithValue("@Status", invoice.Status);
                            command.Parameters.AddWithValue("@Remarks", invoice.Remarks ?? (object)DBNull.Value);
                            command.Parameters.AddWithValue("@CreatedBy", invoice.CreatedBy);
                            
                            // Validate DateTime values are within SQL Server range
                            var sqlMinDate = new DateTime(1753, 1, 1);
                            var sqlMaxDate = new DateTime(9999, 12, 31, 23, 59, 59);
                            
                            if (invoice.CreatedDate < sqlMinDate || invoice.CreatedDate > sqlMaxDate)
                            {
                                invoice.CreatedDate = DateTime.Now; // Fix it
                            }
                            
                            if (invoice.TransactionTime < sqlMinDate || invoice.TransactionTime > sqlMaxDate)
                            {
                                invoice.TransactionTime = DateTime.Now; // Fix it
                            }
                            
                            command.Parameters.AddWithValue("@CreatedDate", invoice.CreatedDate);
                            command.Parameters.AddWithValue("@Barcode", invoice.Barcode);
                            command.Parameters.AddWithValue("@BarcodeImage", invoice.BarcodeImage != null ? invoice.BarcodeImage : (object)DBNull.Value);
                            command.Parameters.AddWithValue("@PrintStatus", invoice.PrintStatus);
                            command.Parameters.AddWithValue("@CashierId", invoice.CashierId ?? (object)DBNull.Value);
                            command.Parameters.AddWithValue("@TransactionTime", invoice.TransactionTime);

                            var invoiceId = Convert.ToInt32(command.ExecuteScalar());
                            invoice.SalesInvoiceId = invoiceId;

                            // Create invoice details
                            foreach (var detail in invoice.Items)
                            {
                                detail.SalesInvoiceId = invoiceId;
                                CreateSalesInvoiceDetailInTransaction(detail, connection, transaction);
                            }

                            // Create payments
                            foreach (var payment in invoice.Payments)
                            {
                                payment.SalesInvoiceId = invoiceId;
                                CreateSalesPaymentInTransaction(payment, connection, transaction);
                            }

                            transaction.Commit();
                            return invoiceId;
                        }
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }
                }
            }
        }

        public bool UpdateSalesInvoice(SalesInvoice invoice)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    UPDATE SalesInvoices SET
                        InvoiceDate = @InvoiceDate,
                        CustomerId = @CustomerId,
                        CustomerName = @CustomerName,
                        CustomerPhone = @CustomerPhone,
                        CustomerAddress = @CustomerAddress,
                        PaymentMode = @PaymentMode,
                        Subtotal = @Subtotal,
                        DiscountAmount = @DiscountAmount,
                        DiscountPercentage = @DiscountPercentage,
                        TaxableAmount = @TaxableAmount,
                        TaxAmount = @TaxAmount,
                        TaxPercentage = @TaxPercentage,
                        TotalAmount = @TotalAmount,
                        PaidAmount = @PaidAmount,
                        ChangeAmount = @ChangeAmount,
                        Status = @Status,
                        Remarks = @Remarks,
                        ModifiedBy = @ModifiedBy,
                        ModifiedDate = @ModifiedDate
                    WHERE SalesInvoiceId = @SalesInvoiceId";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@SalesInvoiceId", invoice.SalesInvoiceId);
                    command.Parameters.AddWithValue("@InvoiceDate", invoice.InvoiceDate);
                    // Handle Walk-in Customer by getting or creating the walk-in customer record
                    if (invoice.CustomerId <= 0)
                    {
                        var walkInCustomerId = GetOrCreateWalkInCustomer(connection);
                        command.Parameters.AddWithValue("@CustomerId", walkInCustomerId);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@CustomerId", invoice.CustomerId);
                    }
                    command.Parameters.AddWithValue("@CustomerName", invoice.CustomerName ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@CustomerPhone", invoice.CustomerPhone ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@CustomerAddress", invoice.CustomerAddress ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@PaymentMode", invoice.PaymentMode);
                    command.Parameters.AddWithValue("@Subtotal", invoice.Subtotal);
                    command.Parameters.AddWithValue("@DiscountAmount", invoice.DiscountAmount);
                    command.Parameters.AddWithValue("@DiscountPercentage", invoice.DiscountPercentage);
                    command.Parameters.AddWithValue("@TaxableAmount", invoice.TaxableAmount);
                    command.Parameters.AddWithValue("@TaxAmount", invoice.TaxAmount);
                    command.Parameters.AddWithValue("@TaxPercentage", invoice.TaxPercentage);
                    command.Parameters.AddWithValue("@TotalAmount", invoice.TotalAmount);
                    command.Parameters.AddWithValue("@PaidAmount", invoice.PaidAmount);
                    command.Parameters.AddWithValue("@ChangeAmount", invoice.ChangeAmount);
                    command.Parameters.AddWithValue("@Status", invoice.Status);
                    command.Parameters.AddWithValue("@Remarks", invoice.Remarks ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@ModifiedBy", invoice.ModifiedBy ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@ModifiedDate", invoice.ModifiedDate ?? (object)DBNull.Value);

                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public bool DeleteSalesInvoice(int invoiceId)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    try
                    {
                        // Delete payments
                        var deletePaymentsQuery = "DELETE FROM SalesPayments WHERE SalesInvoiceId = @SalesInvoiceId";
                        using (var command = new SqlCommand(deletePaymentsQuery, connection, transaction))
                        {
                            command.Parameters.AddWithValue("@SalesInvoiceId", invoiceId);
                            command.ExecuteNonQuery();
                        }

                        // Delete invoice details
                        var deleteDetailsQuery = "DELETE FROM SalesInvoiceDetails WHERE SalesInvoiceId = @SalesInvoiceId";
                        using (var command = new SqlCommand(deleteDetailsQuery, connection, transaction))
                        {
                            command.Parameters.AddWithValue("@SalesInvoiceId", invoiceId);
                            command.ExecuteNonQuery();
                        }

                        // Delete invoice
                        var deleteInvoiceQuery = "DELETE FROM SalesInvoices WHERE SalesInvoiceId = @SalesInvoiceId";
                        using (var command = new SqlCommand(deleteInvoiceQuery, connection, transaction))
                        {
                            command.Parameters.AddWithValue("@SalesInvoiceId", invoiceId);
                            command.ExecuteNonQuery();
                        }

                        transaction.Commit();
                        return true;
                    }
                    catch
                    {
                        transaction.Rollback();
                        return false;
                    }
                }
            }
        }

        public SalesInvoice GetSalesInvoiceById(int invoiceId)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT si.*, u.FirstName + ' ' + u.LastName AS CreatedByUser
                    FROM SalesInvoices si
                    LEFT JOIN Users u ON si.CreatedBy = u.UserId
                    WHERE si.SalesInvoiceId = @SalesInvoiceId";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@SalesInvoiceId", invoiceId);
                    using (var reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return MapSalesInvoice(reader);
                        }
                    }
                }
            }
            return null;
        }

        public SalesInvoice GetSalesInvoiceByNumber(string invoiceNumber)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT si.*, u.FirstName + ' ' + u.LastName AS CreatedByUser
                    FROM SalesInvoices si
                    LEFT JOIN Users u ON si.CreatedBy = u.UserId
                    WHERE si.InvoiceNumber = @InvoiceNumber";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@InvoiceNumber", invoiceNumber);
                    using (var reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return MapSalesInvoice(reader);
                        }
                    }
                }
            }
            return null;
        }

        public List<SalesInvoice> GetAllSalesInvoices()
        {
            var invoices = new List<SalesInvoice>();
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT si.*, u.FirstName + ' ' + u.LastName AS CreatedByUser
                    FROM SalesInvoices si
                    LEFT JOIN Users u ON si.CreatedBy = u.UserId
                    ORDER BY si.InvoiceDate DESC";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        invoices.Add(MapSalesInvoice(reader));
                    }
                }
            }
            return invoices;
        }

        public List<SalesInvoice> GetSalesInvoicesByDateRange(DateTime startDate, DateTime endDate)
        {
            var invoices = new List<SalesInvoice>();
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT si.*, u.FirstName + ' ' + u.LastName AS CreatedByUser
                    FROM SalesInvoices si
                    LEFT JOIN Users u ON si.CreatedBy = u.UserId
                    WHERE si.InvoiceDate >= @StartDate AND si.InvoiceDate <= @EndDate
                    ORDER BY si.InvoiceDate DESC";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@StartDate", startDate);
                    command.Parameters.AddWithValue("@EndDate", endDate);
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            invoices.Add(MapSalesInvoice(reader));
                        }
                    }
                }
            }
            return invoices;
        }

        public List<SalesInvoice> GetSalesInvoicesByCustomer(int customerId)
        {
            var invoices = new List<SalesInvoice>();
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT si.*, u.FirstName + ' ' + u.LastName AS CreatedByUser
                    FROM SalesInvoices si
                    LEFT JOIN Users u ON si.CreatedBy = u.UserId
                    WHERE si.CustomerId = @CustomerId
                    ORDER BY si.InvoiceDate DESC";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@CustomerId", customerId);
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            invoices.Add(MapSalesInvoice(reader));
                        }
                    }
                }
            }
            return invoices;
        }

        public List<SalesInvoice> GetSalesInvoicesByStatus(string status)
        {
            var invoices = new List<SalesInvoice>();
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT si.*, u.FirstName + ' ' + u.LastName AS CreatedByUser
                    FROM SalesInvoices si
                    LEFT JOIN Users u ON si.CreatedBy = u.UserId
                    WHERE si.Status = @Status
                    ORDER BY si.InvoiceDate DESC";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Status", status);
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            invoices.Add(MapSalesInvoice(reader));
                        }
                    }
                }
            }
            return invoices;
        }

        public bool CreateSalesInvoiceDetail(SalesInvoiceDetail detail)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    INSERT INTO SalesInvoiceDetails (
                        SalesInvoiceId, ProductId, ProductCode, ProductName, ProductDescription,
                        Quantity, UnitPrice, DiscountAmount, DiscountPercentage, TaxableAmount,
                        TaxAmount, TaxPercentage, TotalAmount, BatchNumber, ExpiryDate, Remarks
                    ) VALUES (
                        @SalesInvoiceId, @ProductId, @ProductCode, @ProductName, @ProductDescription,
                        @Quantity, @UnitPrice, @DiscountAmount, @DiscountPercentage, @TaxableAmount,
                        @TaxAmount, @TaxPercentage, @TotalAmount, @BatchNumber, @ExpiryDate, @Remarks
                    )";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@SalesInvoiceId", detail.SalesInvoiceId);
                    command.Parameters.AddWithValue("@ProductId", detail.ProductId);
                    command.Parameters.AddWithValue("@ProductCode", detail.ProductCode);
                    command.Parameters.AddWithValue("@ProductName", detail.ProductName);
                    command.Parameters.AddWithValue("@ProductDescription", detail.ProductDescription ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@Quantity", detail.Quantity);
                    command.Parameters.AddWithValue("@UnitPrice", detail.UnitPrice);
                    command.Parameters.AddWithValue("@DiscountAmount", detail.DiscountAmount);
                    command.Parameters.AddWithValue("@DiscountPercentage", detail.DiscountPercentage);
                    command.Parameters.AddWithValue("@TaxableAmount", detail.TaxableAmount);
                    command.Parameters.AddWithValue("@TaxAmount", detail.TaxAmount);
                    command.Parameters.AddWithValue("@TaxPercentage", detail.TaxPercentage);
                    command.Parameters.AddWithValue("@TotalAmount", detail.TotalAmount); // Use TotalAmount directly
                    command.Parameters.AddWithValue("@BatchNumber", detail.BatchNumber ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@ExpiryDate", detail.ExpiryDate.HasValue ? detail.ExpiryDate.Value : (object)DBNull.Value);
                    command.Parameters.AddWithValue("@Remarks", detail.Remarks ?? (object)DBNull.Value);

                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public bool CreateSalesInvoiceDetailInTransaction(SalesInvoiceDetail detail, SqlConnection connection, SqlTransaction transaction)
        {
            var query = @"
                INSERT INTO SalesInvoiceDetails (
                    SalesInvoiceId, ProductId, ProductCode, ProductName, ProductDescription,
                    Quantity, UnitPrice, DiscountAmount, DiscountPercentage, TaxableAmount,
                    TaxAmount, TaxPercentage, TotalAmount, BatchNumber, ExpiryDate, Remarks
                ) VALUES (
                    @SalesInvoiceId, @ProductId, @ProductCode, @ProductName, @ProductDescription,
                    @Quantity, @UnitPrice, @DiscountAmount, @DiscountPercentage, @TaxableAmount,
                    @TaxAmount, @TaxPercentage, @TotalAmount, @BatchNumber, @ExpiryDate, @Remarks
                )";

            using (var command = new SqlCommand(query, connection, transaction))
            {
                command.CommandTimeout = 10; // 10 second timeout
                command.Parameters.AddWithValue("@SalesInvoiceId", detail.SalesInvoiceId);
                command.Parameters.AddWithValue("@ProductId", detail.ProductId);
                command.Parameters.AddWithValue("@ProductCode", detail.ProductCode);
                command.Parameters.AddWithValue("@ProductName", detail.ProductName);
                command.Parameters.AddWithValue("@ProductDescription", detail.ProductDescription ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@Quantity", detail.Quantity);
                command.Parameters.AddWithValue("@UnitPrice", detail.UnitPrice);
                command.Parameters.AddWithValue("@DiscountAmount", detail.DiscountAmount);
                command.Parameters.AddWithValue("@DiscountPercentage", detail.DiscountPercentage);
                command.Parameters.AddWithValue("@TaxableAmount", detail.TaxableAmount);
                command.Parameters.AddWithValue("@TaxAmount", detail.TaxAmount);
                command.Parameters.AddWithValue("@TaxPercentage", detail.TaxPercentage);
                command.Parameters.AddWithValue("@TotalAmount", detail.TotalAmount);
                command.Parameters.AddWithValue("@BatchNumber", detail.BatchNumber ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@ExpiryDate", detail.ExpiryDate.HasValue ? detail.ExpiryDate.Value : (object)DBNull.Value);
                command.Parameters.AddWithValue("@Remarks", detail.Remarks ?? (object)DBNull.Value);

                var rowsAffected = command.ExecuteNonQuery();
                return rowsAffected > 0;
            }
        }

        public bool CreateSalesPaymentInTransaction(SalesPayment payment, SqlConnection connection, SqlTransaction transaction)
        {
            var query = @"
                INSERT INTO SalesPayments (
                    SalesInvoiceId, PaymentMode, Amount, CardNumber, CardType, TransactionId,
                    BankName, ChequeNumber, ChequeDate, MobileNumber, PaymentReference,
                    PaymentDate, Status, Remarks, CreatedBy, CreatedDate
                ) VALUES (
                    @SalesInvoiceId, @PaymentMode, @Amount, @CardNumber, @CardType, @TransactionId,
                    @BankName, @ChequeNumber, @ChequeDate, @MobileNumber, @PaymentReference,
                    @PaymentDate, @Status, @Remarks, @CreatedBy, @CreatedDate
                )";

            using (var command = new SqlCommand(query, connection, transaction))
            {
                command.CommandTimeout = 10; // 10 second timeout
                
                // Validate DateTime values are within SQL Server range
                var sqlMinDate = new DateTime(1753, 1, 1);
                var sqlMaxDate = new DateTime(9999, 12, 31, 23, 59, 59);
                
                var paymentDate = payment.PaymentDate;
                var createdDate = payment.CreatedDate;
                
                if (paymentDate < sqlMinDate || paymentDate > sqlMaxDate)
                {
                    paymentDate = DateTime.Now;
                }
                
                if (createdDate < sqlMinDate || createdDate > sqlMaxDate)
                {
                    createdDate = DateTime.Now;
                }
                
                command.Parameters.AddWithValue("@SalesInvoiceId", payment.SalesInvoiceId);
                command.Parameters.AddWithValue("@PaymentMode", payment.PaymentMode);
                command.Parameters.AddWithValue("@Amount", payment.Amount);
                command.Parameters.AddWithValue("@CardNumber", payment.CardNumber ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@CardType", payment.CardType ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@TransactionId", payment.TransactionId ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@BankName", payment.BankName ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@ChequeNumber", payment.ChequeNumber ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@ChequeDate", payment.ChequeDate.HasValue ? payment.ChequeDate.Value : (object)DBNull.Value);
                command.Parameters.AddWithValue("@MobileNumber", payment.MobileNumber ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@PaymentReference", payment.PaymentReference ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@PaymentDate", paymentDate);
                command.Parameters.AddWithValue("@Status", payment.Status);
                command.Parameters.AddWithValue("@Remarks", payment.Remarks ?? (object)DBNull.Value);
                command.Parameters.AddWithValue("@CreatedBy", payment.CreatedBy);
                command.Parameters.AddWithValue("@CreatedDate", createdDate);

                var rowsAffected = command.ExecuteNonQuery();
                return rowsAffected > 0;
            }
        }

        public bool UpdateSalesInvoiceDetail(SalesInvoiceDetail detail)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    UPDATE SalesInvoiceDetails SET
                        ProductId = @ProductId,
                        ProductCode = @ProductCode,
                        ProductName = @ProductName,
                        ProductDescription = @ProductDescription,
                        Quantity = @Quantity,
                        UnitPrice = @UnitPrice,
                        DiscountAmount = @DiscountAmount,
                        DiscountPercentage = @DiscountPercentage,
                        TaxableAmount = @TaxableAmount,
                        TaxAmount = @TaxAmount,
                        TaxPercentage = @TaxPercentage,
                        LineTotal = @LineTotal,
                        BatchNumber = @BatchNumber,
                        ExpiryDate = @ExpiryDate,
                        Remarks = @Remarks
                    WHERE DetailId = @DetailId";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@DetailId", detail.DetailId);
                    command.Parameters.AddWithValue("@ProductId", detail.ProductId);
                    command.Parameters.AddWithValue("@ProductCode", detail.ProductCode);
                    command.Parameters.AddWithValue("@ProductName", detail.ProductName);
                    command.Parameters.AddWithValue("@ProductDescription", detail.ProductDescription ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@Quantity", detail.Quantity);
                    command.Parameters.AddWithValue("@UnitPrice", detail.UnitPrice);
                    command.Parameters.AddWithValue("@DiscountAmount", detail.DiscountAmount);
                    command.Parameters.AddWithValue("@DiscountPercentage", detail.DiscountPercentage);
                    command.Parameters.AddWithValue("@TaxableAmount", detail.TaxableAmount);
                    command.Parameters.AddWithValue("@TaxAmount", detail.TaxAmount);
                    command.Parameters.AddWithValue("@TaxPercentage", detail.TaxPercentage);
                    command.Parameters.AddWithValue("@TotalAmount", detail.TotalAmount); // Use TotalAmount directly
                    command.Parameters.AddWithValue("@BatchNumber", detail.BatchNumber ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@ExpiryDate", detail.ExpiryDate.HasValue ? detail.ExpiryDate.Value : (object)DBNull.Value);
                    command.Parameters.AddWithValue("@Remarks", detail.Remarks ?? (object)DBNull.Value);

                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public bool DeleteSalesInvoiceDetail(int detailId)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = "DELETE FROM SalesInvoiceDetails WHERE DetailId = @DetailId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@DetailId", detailId);
                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public List<SalesInvoiceDetail> GetSalesInvoiceDetails(int invoiceId)
        {
            var details = new List<SalesInvoiceDetail>();
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT * FROM SalesInvoiceDetails 
                    WHERE SalesInvoiceId = @SalesInvoiceId
                    ORDER BY DetailId";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@SalesInvoiceId", invoiceId);
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            details.Add(MapSalesInvoiceDetail(reader));
                        }
                    }
                }
            }
            return details;
        }

        public bool CreateSalesPayment(SalesPayment payment)
        {
            try
            {
                using (var connection = new SqlConnection(_connectionString))
                {
                    connection.Open();
                    var query = @"
                        INSERT INTO SalesPayments (
                            SalesInvoiceId, PaymentMode, Amount, CardNumber, CardType, TransactionId,
                            BankName, ChequeNumber, ChequeDate, MobileNumber, PaymentReference,
                            PaymentDate, Status, Remarks, CreatedBy, CreatedDate
                        ) VALUES (
                            @SalesInvoiceId, @PaymentMode, @Amount, @CardNumber, @CardType, @TransactionId,
                            @BankName, @ChequeNumber, @ChequeDate, @MobileNumber, @PaymentReference,
                            @PaymentDate, @Status, @Remarks, @CreatedBy, @CreatedDate
                        )";

                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@SalesInvoiceId", payment.SalesInvoiceId);
                        command.Parameters.AddWithValue("@PaymentMode", payment.PaymentMode);
                        command.Parameters.AddWithValue("@Amount", payment.Amount);
                        command.Parameters.AddWithValue("@CardNumber", payment.CardNumber ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@CardType", payment.CardType ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@TransactionId", payment.TransactionId ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@BankName", payment.BankName ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@ChequeNumber", payment.ChequeNumber ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@ChequeDate", payment.ChequeDate.HasValue ? payment.ChequeDate.Value : (object)DBNull.Value);
                        command.Parameters.AddWithValue("@MobileNumber", payment.MobileNumber ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@PaymentReference", payment.PaymentReference ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@PaymentDate", payment.PaymentDate);
                        command.Parameters.AddWithValue("@Status", payment.Status);
                        command.Parameters.AddWithValue("@Remarks", payment.Remarks ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@CreatedBy", payment.CreatedBy);
                        command.Parameters.AddWithValue("@CreatedDate", payment.CreatedDate);

                        return command.ExecuteNonQuery() > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                // Log the error for debugging (can be removed in production)
                System.Diagnostics.Debug.WriteLine($"CreateSalesPayment Error: {ex.Message}");
                return false;
            }
        }

        public bool UpdateSalesPayment(SalesPayment payment)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    UPDATE SalesPayments SET
                        PaymentMode = @PaymentMode,
                        Amount = @Amount,
                        CardNumber = @CardNumber,
                        CardType = @CardType,
                        TransactionId = @TransactionId,
                        BankName = @BankName,
                        ChequeNumber = @ChequeNumber,
                        ChequeDate = @ChequeDate,
                        MobileNumber = @MobileNumber,
                        PaymentReference = @PaymentReference,
                        PaymentDate = @PaymentDate,
                        Status = @Status,
                        Remarks = @Remarks
                    WHERE PaymentId = @PaymentId";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@PaymentId", payment.PaymentId);
                    command.Parameters.AddWithValue("@PaymentMode", payment.PaymentMode);
                    command.Parameters.AddWithValue("@Amount", payment.Amount);
                    command.Parameters.AddWithValue("@CardNumber", payment.CardNumber ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@CardType", payment.CardType ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@TransactionId", payment.TransactionId ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@BankName", payment.BankName ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@ChequeNumber", payment.ChequeNumber ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@ChequeDate", payment.ChequeDate.HasValue ? payment.ChequeDate.Value : (object)DBNull.Value);
                    command.Parameters.AddWithValue("@MobileNumber", payment.MobileNumber ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@PaymentReference", payment.PaymentReference ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@PaymentDate", payment.PaymentDate);
                    command.Parameters.AddWithValue("@Status", payment.Status);
                    command.Parameters.AddWithValue("@Remarks", payment.Remarks ?? (object)DBNull.Value);

                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public bool DeleteSalesPayment(int paymentId)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = "DELETE FROM SalesPayments WHERE PaymentId = @PaymentId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@PaymentId", paymentId);
                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public List<SalesPayment> GetSalesPayments(int invoiceId)
        {
            var payments = new List<SalesPayment>();
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT * FROM SalesPayments 
                    WHERE SalesInvoiceId = @SalesInvoiceId
                    ORDER BY PaymentDate";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@SalesInvoiceId", invoiceId);
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            payments.Add(MapSalesPayment(reader));
                        }
                    }
                }
            }
            return payments;
        }

        public string GenerateInvoiceNumber()
        {
            var currentDate = DateTime.Now;
            var yearMonth = currentDate.ToString("yyyyMM");
            var prefix = yearMonth;

            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ISNULL(MAX(CAST(SUBSTRING(InvoiceNumber, 7, 4) AS INT)), 0) + 1
                    FROM SalesInvoices 
                    WHERE InvoiceNumber LIKE @Prefix + '%'";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@Prefix", prefix);
                    var nextNumber = Convert.ToInt32(command.ExecuteScalar());
                    return $"{prefix}{nextNumber:D4}";
                }
            }
        }

        public bool UpdateInvoiceBarcode(int invoiceId, string barcode, byte[] barcodeImage)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    UPDATE SalesInvoices SET
                        Barcode = @Barcode,
                        BarcodeImage = @BarcodeImage
                    WHERE SalesInvoiceId = @SalesInvoiceId";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@SalesInvoiceId", invoiceId);
                    command.Parameters.AddWithValue("@Barcode", barcode);
                    command.Parameters.AddWithValue("@BarcodeImage", barcodeImage != null ? barcodeImage : (object)DBNull.Value);

                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public bool UpdatePrintStatus(int invoiceId, bool printStatus, DateTime? printDate)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    UPDATE SalesInvoices SET
                        PrintStatus = @PrintStatus,
                        PrintDate = @PrintDate
                    WHERE SalesInvoiceId = @SalesInvoiceId";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@SalesInvoiceId", invoiceId);
                    command.Parameters.AddWithValue("@PrintStatus", printStatus);
                    command.Parameters.AddWithValue("@PrintDate", printDate ?? (object)DBNull.Value);

                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public bool ReserveStock(int productId, decimal quantity)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                
                // Check current stock availability
                
                var query = @"
                    UPDATE Products SET
                        ReservedQuantity = ISNULL(ReservedQuantity, 0) + @Quantity
                    WHERE ProductId = @ProductId
                    AND (ISNULL(ReservedQuantity, 0) + @Quantity) <= StockQuantity";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ProductId", productId);
                    command.Parameters.AddWithValue("@Quantity", quantity);

                    var rowsAffected = command.ExecuteNonQuery();
                    return rowsAffected > 0;
                }
            }
        }

        public bool ReleaseStock(int productId, decimal quantity)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    UPDATE Products SET
                        ReservedQuantity = ISNULL(ReservedQuantity, 0) - @Quantity
                    WHERE ProductId = @ProductId
                    AND ISNULL(ReservedQuantity, 0) >= @Quantity";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ProductId", productId);
                    command.Parameters.AddWithValue("@Quantity", quantity);

                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public bool ConfirmStock(int productId, decimal quantity)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    UPDATE Products SET
                        Quantity = Quantity - @Quantity,
                        ReservedQuantity = ISNULL(ReservedQuantity, 0) - @Quantity
                    WHERE ProductId = @ProductId
                    AND ISNULL(ReservedQuantity, 0) >= @Quantity";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ProductId", productId);
                    command.Parameters.AddWithValue("@Quantity", quantity);

                    return command.ExecuteNonQuery() > 0;
                }
            }
        }

        public List<SalesInvoice> GetSalesReport(DateTime startDate, DateTime endDate, int? customerId, string status)
        {
            var invoices = new List<SalesInvoice>();
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = new StringBuilder(@"
                    SELECT si.*, u.FirstName + ' ' + u.LastName AS CreatedByUser
                    FROM SalesInvoices si
                    LEFT JOIN Users u ON si.CreatedBy = u.UserId
                    WHERE si.InvoiceDate >= @StartDate AND si.InvoiceDate <= @EndDate");

                if (customerId.HasValue)
                {
                    query.Append(" AND si.CustomerId = @CustomerId");
                }

                if (!string.IsNullOrEmpty(status))
                {
                    query.Append(" AND si.Status = @Status");
                }

                query.Append(" ORDER BY si.InvoiceDate DESC");

                using (var command = new SqlCommand(query.ToString(), connection))
                {
                    command.Parameters.AddWithValue("@StartDate", startDate);
                    command.Parameters.AddWithValue("@EndDate", endDate);

                    if (customerId.HasValue)
                    {
                        command.Parameters.AddWithValue("@CustomerId", customerId.Value);
                    }

                    if (!string.IsNullOrEmpty(status))
                    {
                        command.Parameters.AddWithValue("@Status", status);
                    }

                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            invoices.Add(MapSalesInvoice(reader));
                        }
                    }
                }
            }
            return invoices;
        }

        public decimal GetTotalSales(DateTime startDate, DateTime endDate)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ISNULL(SUM(TotalAmount), 0)
                    FROM SalesInvoices 
                    WHERE InvoiceDate >= @StartDate AND InvoiceDate <= @EndDate
                    AND Status IN ('CONFIRMED', 'PAID', 'DELIVERED')";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@StartDate", startDate);
                    command.Parameters.AddWithValue("@EndDate", endDate);

                    return Convert.ToDecimal(command.ExecuteScalar());
                }
            }
        }

        public int GetInvoiceCount(DateTime startDate, DateTime endDate)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT COUNT(*)
                    FROM SalesInvoices 
                    WHERE InvoiceDate >= @StartDate AND InvoiceDate <= @EndDate";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@StartDate", startDate);
                    command.Parameters.AddWithValue("@EndDate", endDate);

                    return Convert.ToInt32(command.ExecuteScalar());
                }
            }
        }

        private SalesInvoice MapSalesInvoice(SqlDataReader reader)
        {
            return new SalesInvoice
            {
                SalesInvoiceId = Convert.ToInt32(reader["SalesInvoiceId"]),
                InvoiceNumber = reader["InvoiceNumber"].ToString(),
                InvoiceDate = Convert.ToDateTime(reader["InvoiceDate"]),
                CustomerId = Convert.ToInt32(reader["CustomerId"]),
                CustomerName = reader["CustomerName"]?.ToString(),
                CustomerPhone = reader["CustomerPhone"]?.ToString(),
                CustomerAddress = reader["CustomerAddress"]?.ToString(),
                PaymentMode = reader["PaymentMode"].ToString(),
                Subtotal = Convert.ToDecimal(reader["Subtotal"]),
                DiscountAmount = Convert.ToDecimal(reader["DiscountAmount"]),
                DiscountPercentage = Convert.ToDecimal(reader["DiscountPercentage"]),
                TaxableAmount = Convert.ToDecimal(reader["TaxableAmount"]),
                TaxAmount = Convert.ToDecimal(reader["TaxAmount"]),
                TaxPercentage = Convert.ToDecimal(reader["TaxPercentage"]),
                TotalAmount = Convert.ToDecimal(reader["TotalAmount"]),
                PaidAmount = Convert.ToDecimal(reader["PaidAmount"]),
                ChangeAmount = Convert.ToDecimal(reader["ChangeAmount"]),
                Status = reader["Status"].ToString(),
                Remarks = reader["Remarks"]?.ToString(),
                CreatedBy = Convert.ToInt32(reader["CreatedBy"]),
                CreatedByUser = reader["CreatedByUser"]?.ToString(),
                CreatedDate = Convert.ToDateTime(reader["CreatedDate"]),
                ModifiedBy = reader["ModifiedBy"] != DBNull.Value ? Convert.ToInt32(reader["ModifiedBy"]) : (int?)null,
                ModifiedDate = reader["ModifiedDate"] != DBNull.Value ? Convert.ToDateTime(reader["ModifiedDate"]) : (DateTime?)null,
                Barcode = reader["Barcode"]?.ToString(),
                BarcodeImage = reader["BarcodeImage"] != DBNull.Value ? (byte[])reader["BarcodeImage"] : null,
                PrintStatus = Convert.ToBoolean(reader["PrintStatus"]),
                PrintDate = reader["PrintDate"] != DBNull.Value ? Convert.ToDateTime(reader["PrintDate"]) : (DateTime?)null,
                CashierId = reader["CashierId"] != DBNull.Value ? Convert.ToInt32(reader["CashierId"]) : (int?)null,
                TransactionTime = Convert.ToDateTime(reader["TransactionTime"])
            };
        }

        private SalesInvoiceDetail MapSalesInvoiceDetail(SqlDataReader reader)
        {
            return new SalesInvoiceDetail
            {
                DetailId = Convert.ToInt32(reader["DetailId"]),
                SalesInvoiceId = Convert.ToInt32(reader["SalesInvoiceId"]),
                ProductId = Convert.ToInt32(reader["ProductId"]),
                ProductCode = reader["ProductCode"].ToString(),
                ProductName = reader["ProductName"].ToString(),
                ProductDescription = reader["ProductDescription"]?.ToString(),
                Quantity = Convert.ToDecimal(reader["Quantity"]),
                UnitPrice = Convert.ToDecimal(reader["UnitPrice"]),
                DiscountAmount = Convert.ToDecimal(reader["DiscountAmount"]),
                DiscountPercentage = Convert.ToDecimal(reader["DiscountPercentage"]),
                TaxableAmount = Convert.ToDecimal(reader["TaxableAmount"]),
                TaxAmount = Convert.ToDecimal(reader["TaxAmount"]),
                TaxPercentage = Convert.ToDecimal(reader["TaxPercentage"]),
                LineTotal = Convert.ToDecimal(reader["TotalAmount"]), // Both LineTotal and TotalAmount use the same database column
                TotalAmount = Convert.ToDecimal(reader["TotalAmount"]),
                BatchNumber = reader["BatchNumber"]?.ToString(),
                ExpiryDate = reader["ExpiryDate"] != DBNull.Value ? Convert.ToDateTime(reader["ExpiryDate"]) : (DateTime?)null,
                Remarks = reader["Remarks"]?.ToString()
            };
        }

        private SalesPayment MapSalesPayment(SqlDataReader reader)
        {
            return new SalesPayment
            {
                PaymentId = Convert.ToInt32(reader["PaymentId"]),
                SalesInvoiceId = Convert.ToInt32(reader["SalesInvoiceId"]),
                PaymentMode = reader["PaymentMode"].ToString(),
                Amount = Convert.ToDecimal(reader["Amount"]),
                CardNumber = reader["CardNumber"]?.ToString(),
                CardType = reader["CardType"]?.ToString(),
                TransactionId = reader["TransactionId"]?.ToString(),
                BankName = reader["BankName"]?.ToString(),
                ChequeNumber = reader["ChequeNumber"]?.ToString(),
                ChequeDate = reader["ChequeDate"] != DBNull.Value ? Convert.ToDateTime(reader["ChequeDate"]) : (DateTime?)null,
                MobileNumber = reader["MobileNumber"]?.ToString(),
                PaymentReference = reader["PaymentReference"]?.ToString(),
                PaymentDate = Convert.ToDateTime(reader["PaymentDate"]),
                Status = reader["Status"].ToString(),
                Remarks = reader["Remarks"]?.ToString(),
                CreatedBy = Convert.ToInt32(reader["CreatedBy"]),
                CreatedDate = Convert.ToDateTime(reader["CreatedDate"])
            };
        }

        private byte[] GenerateBarcodeImage(string barcode)
        {
            try
            {
                // Create a simple barcode image
                using (var bitmap = new System.Drawing.Bitmap(300, 80))
                using (var graphics = System.Drawing.Graphics.FromImage(bitmap))
                {
                    graphics.Clear(System.Drawing.Color.White);
                    
                    // Draw barcode lines (simple pattern)
                    var rand = new Random(barcode.GetHashCode()); // Use text hash for consistent pattern
                    int startX = 20;
                    int lineSpacing = 3;
                    
                    for (int i = 0; i < barcode.Length * 4; i++)
                    {
                        int height = rand.Next(20, 60);
                        int x = startX + i * lineSpacing;
                        graphics.DrawLine(System.Drawing.Pens.Black, x, 10, x, 10 + height);
                    }
                    
                    // Convert bitmap to byte array
                    using (var stream = new System.IO.MemoryStream())
                    {
                        bitmap.Save(stream, System.Drawing.Imaging.ImageFormat.Png);
                        return stream.ToArray();
                    }
                }
            }
            catch (Exception ex)
            {
                return null; // Return null if generation fails
            }
        }

        public bool ReduceStockQuantity(int productId, decimal quantity)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"
                    UPDATE Products 
                    SET StockQuantity = StockQuantity - @Quantity,
                        ReservedQuantity = ISNULL(ReservedQuantity, 0) - @Quantity
                    WHERE ProductId = @ProductId 
                    AND StockQuantity >= @Quantity";

                using (var command = new SqlCommand(query, connection))
                {
                    command.CommandTimeout = 10;
                    command.Parameters.AddWithValue("@ProductId", productId);
                    command.Parameters.AddWithValue("@Quantity", quantity);

                    var rowsAffected = command.ExecuteNonQuery();
                    return rowsAffected > 0;
                }
            }
        }

        private int GetOrCreateWalkInCustomer(SqlConnection connection)
        {
            try
            {
                // First, try to get existing walk-in customer
                var getWalkInQuery = "SELECT CustomerId FROM Customers WHERE CustomerCode = 'WALKIN'";
                using (var command = new SqlCommand(getWalkInQuery, connection))
                {
                    var result = command.ExecuteScalar();
                    if (result != null && result != DBNull.Value)
                    {
                        return Convert.ToInt32(result);
                    }
                }

                // If not found, create walk-in customer
                var createWalkInQuery = @"
                    INSERT INTO Customers (
                        CustomerCode, CompanyName, ContactName, Email, Phone, Address, 
                        City, State, PostalCode, Country, IsActive, CreatedDate, CreatedBy
                    ) VALUES (
                        'WALKIN', 'Walk-in Customer', 'Walk-in Customer', 'walkin@company.com', 
                        '', 'Walk-in Customer', 'Karachi', 'Sindh', '75000', 'Pakistan', 
                        1, GETDATE(), 1
                    );
                    SELECT SCOPE_IDENTITY();";

                using (var command = new SqlCommand(createWalkInQuery, connection))
                {
                    var newCustomerId = command.ExecuteScalar();
                    return Convert.ToInt32(newCustomerId);
                }
            }
            catch (Exception ex)
            {
                DebugHelper.WriteException("SalesInvoiceRepository.GetOrCreateWalkInCustomer", ex);
                // Fallback to a default customer ID (assuming customer ID 1 exists)
                return 1;
            }
        }

        private int GetOrCreateWalkInCustomerInTransaction(SqlConnection connection, SqlTransaction transaction)
        {
            try
            {
                // First, try to get existing walk-in customer
                var getWalkInQuery = "SELECT CustomerId FROM Customers WHERE CustomerCode = 'WALKIN'";
                using (var command = new SqlCommand(getWalkInQuery, connection, transaction))
                {
                    command.CommandTimeout = 10;
                    var result = command.ExecuteScalar();
                    if (result != null && result != DBNull.Value)
                    {
                        return Convert.ToInt32(result);
                    }
                }

                // If not found, create walk-in customer
                var createWalkInQuery = @"
                    INSERT INTO Customers (
                        CustomerCode, CompanyName, ContactName, Email, Phone, Address, 
                        City, State, PostalCode, Country, IsActive, CreatedDate, CreatedBy
                    ) VALUES (
                        'WALKIN', 'Walk-in Customer', 'Walk-in Customer', 'walkin@company.com', 
                        '', 'Walk-in Customer', 'Karachi', 'Sindh', '75000', 'Pakistan', 
                        1, GETDATE(), 1
                    );
                    SELECT SCOPE_IDENTITY();";

                using (var command = new SqlCommand(createWalkInQuery, connection, transaction))
                {
                    command.CommandTimeout = 10;
                    var newCustomerId = command.ExecuteScalar();
                    return Convert.ToInt32(newCustomerId);
                }
            }
            catch (Exception ex)
            {
                DebugHelper.WriteException("SalesInvoiceRepository.GetOrCreateWalkInCustomerInTransaction", ex);
                // Fallback to a default customer ID (assuming customer ID 1 exists)
                return 1;
            }
        }
    }
}
